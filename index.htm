<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Plan Tracker</title>
  <style>
    body {
      background-color: #1e1e2f;
      color: #fff;
      font-family: 'Arial', sans-serif;
      margin: 0;
      padding: 0;
    }

    h1 {
      text-align: center;
      font-size: 2.5em;
      margin-top: 100px;
    }

    .banner {
      position: fixed;
      top: 0;
      width: 100%;
      background-color: #6a0dad;
      color: #fff;
      text-align: center;
      padding: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
      z-index: 1000;
    }

    .banner h2 {
      margin: 0;
      font-size: 1.8em;
      letter-spacing: 2px;
    }

    .banner p {
      font-size: 1.1em;
      margin-top: 5px;
    }

    table {
      border-collapse: collapse;
      width: 90%;
      margin: 20px auto;
      color: #fff;
      border-radius: 10px;
      overflow: hidden;
    }

    th, td {
      border: 1px solid #444;
      padding: 12px;
      text-align: center;
      font-size: 1.2em;
    }

    th {
      background-color: #444;
    }

    td {
      background-color: #333;
    }

    .button {
      background-color: #ff1493;
      color: white;
      padding: 10px 20px;
      border: none;
      cursor: pointer;
      font-size: 1em;
      border-radius: 5px;
      margin: 10px 0;
      display: inline-block;
      transition: background-color 0.3s ease;
    }

    .button:hover {
      background-color: #ff69b4;
    }

    input[type="number"], input[type="text"], select {
      font-size: 1.1em;
      padding: 8px;
      border: none;
      border-radius: 5px;
      margin: 10px;
    }

    input[type="number"]:disabled {
      background-color: #666;
      color: #ccc;
    }

    .hidden {
      display: none;
    }

    #totalCollected {
      font-size: 1.8em;
      color: #00ff00;
      text-align: center;
      display: block;
      margin: 20px;
    }

    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle, rgba(238,174,202,0.1), transparent 70%);
      z-index: -1;
    }

    .neon {
      color: #fff;
      text-shadow:
        0 0 5px #fff,
        0 0 10px #ff00ff,
        0 0 20px #ff00ff,
        0 0 40px #ff00ff,
        0 0 80px #ff00ff;
    }
  </style>
</head>

<body>
  <div class="banner">
    <h2>Plan Tracker</h2>
    <p id="currentDateTime"></p>
  </div>

  <h1 class="neon">Hello :-) </h1>

  <div style="text-align: center;">
    <label for="transactionType">Transaction Type:</label>
    <select id="transactionType" onchange="handleTransactionTypeChange()">
      <option value="PIF">Payment in Full (PIF)</option>
      <option value="SIF">Settlement in Full (SIF)</option>
      <option value="Plan" selected>Payment Plan</option>
    </select>

    <div id="amountDiv">
      <label for="amount">Amount:</label>
      <input type="number" id="amount" placeholder="Enter Amount" disabled>
    </div>

    <div id="downPaymentQuestion">
      <p>Was a down payment taken?</p>
      <label><input type="radio" name="downPaymentTaken" value="yes" onclick="handleDownPaymentChange()"> Yes</label>
      <label><input type="radio" name="downPaymentTaken" value="no" onclick="handleDownPaymentChange()"> No</label>
    </div>

    <div id="downPaymentDiv" class="hidden">
      <label for="downPayment">Down Payment:</label>
      <input type="number" id="downPayment" placeholder="Enter Down Payment" disabled>
    </div>

    <button class="button" onclick="addTransaction()">Add Transaction</button>
  </div>

  <table id="transactionTable">
    <thead>
      <tr>
        <th>Timestamp</th>
        <th>Type</th>
        <th>Amount</th>
        <th>Delete</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <p style="text-align: center;">How many did you get today?</p>
  <ul style="list-style: none; text-align: center;">
    <li>PIF: <span id="pifCount">0</span></li>
    <li>SIF: <span id="sifCount">0</span></li>
    <li>Payment Plans: <span id="planCount">0</span></li>
  </ul>

  <div>
    <p style="text-align: center;">Total Money Collected Today:</p>
    <span id="totalCollected">£0.00</span>
    <div style="text-align: center;">
      <label for="fileName">Spreadsheet Name:</label>
      <input type="text" id="fileName" placeholder="Enter name">
      <button class="button" onclick="downloadCSV()">Download as Spreadsheet</button>
    </div>
  </div>

  <script>
    let transactions = [];
    let pifCount = 0;
    let sifCount = 0;
    let planCount = 0;
    let totalCollected = 0;

    function updateDateTime() {
      const now = new Date();
      const formattedDateTime = now.toLocaleString("en-GB", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
      });
      document.getElementById("currentDateTime").innerText = formattedDateTime;
    }
    setInterval(updateDateTime, 1000);

    function handleTransactionTypeChange() {
      const selectedType = document.getElementById("transactionType").value;
      const amountInput = document.getElementById("amount");
      const downPaymentQuestion = document.getElementById("downPaymentQuestion");
      const downPaymentDiv = document.getElementById("downPaymentDiv");
      const downPaymentInput = document.getElementById("downPayment");

      if (selectedType === "PIF" || selectedType === "SIF") {
        amountInput.disabled = false;
        downPaymentQuestion.classList.add("hidden");
        downPaymentDiv.classList.add("hidden");
        downPaymentInput.disabled = true;
        downPaymentInput.value = "";
      } else if (selectedType === "Plan") {
        amountInput.disabled = true;
        amountInput.value = "";
        downPaymentQuestion.classList.remove("hidden");
      }
    }

    function handleDownPaymentChange() {
      const downPaymentDiv = document.getElementById("downPaymentDiv");
      const downPaymentInput = document.getElementById("downPayment");
      const downPaymentTaken = document.querySelector('input[name="downPaymentTaken"]:checked').value;

      if (downPaymentTaken === "yes") {
        downPaymentDiv.classList.remove("hidden");
        downPaymentInput.disabled = false;
      } else {
        downPaymentDiv.classList.add("hidden");
        downPaymentInput.disabled = true;
        downPaymentInput.value = "";
      }
    }

    function addTransaction() {
      const type = document.getElementById("transactionType").value;
      const timestamp = new Date().toLocaleString();
      const amount = parseFloat(document.getElementById("amount").value) || 0;
      const downPayment = parseFloat(document.getElementById("downPayment").value) || 0;

      transactions.push({ timestamp, type, amount, downPayment });

      updateTable();
      updateCounts();
      updateTotalCollected();
    }

    function updateTable() {
      const tbody = document.getElementById("transactionTable").getElementsByTagName("tbody")[0];
      tbody.innerHTML = "";

      for (const transaction of transactions) {
        const row = document.createElement("tr");

        const timestampCell = document.createElement("td");
        timestampCell.innerText = transaction.timestamp;
        row.appendChild(timestampCell);

        const typeCell = document.createElement("td");
        typeCell.innerText = transaction.type;
        row.appendChild(typeCell);

        const amountCell = document.createElement("td");
        if (transaction.type === "Plan") {
          amountCell.innerHTML = `£${transaction.amount.toFixed(2)} (Down Payment: £${transaction.downPayment.toFixed(2)})`;
        } else {
          amountCell.innerHTML = `£${transaction.amount.toFixed(2)}`;
        }
        row.appendChild(amountCell);

        const deleteCell = document.createElement("td");
        const deleteButton = document.createElement("button");
        deleteButton.innerText = "Delete";
        deleteButton.onclick = function () {
          const index = transactions.indexOf(transaction);
          transactions.splice(index, 1);
          updateTable();
          updateCounts();
          updateTotalCollected();
        };
        deleteCell.appendChild(deleteButton);
        row.appendChild(deleteCell);

        tbody.appendChild(row);
      }
    }

    function updateCounts() {
      pifCount = transactions.filter(t => t.type === "PIF").length;
      sifCount = transactions.filter(t => t.type === "SIF").length;
      planCount = transactions.filter(t => t.type === "Plan").length;

      document.getElementById("pifCount").innerText = pifCount;
      document.getElementById("sifCount").innerText = sifCount;
      document.getElementById("planCount").innerText = planCount;
    }

    function updateTotalCollected() {
      totalCollected = transactions.reduce((acc, transaction) => {
        return acc + transaction.amount + transaction.downPayment;
      }, 0);
      document.getElementById("totalCollected").innerText = `£${totalCollected.toFixed(2)}`;
    }

    function downloadCSV() {
      const fileName = document.getElementById("fileName").value;
      if (!fileName) {
        alert("Please enter a spreadsheet name");
        return;
      }

      let csvContent = "Date,Type,Amount,Down Payment\n";
      for (const transaction of transactions) {
        const escapedTimestamp = transaction.timestamp.replace(/"/g, '""');
        csvContent += `${escapedTimestamp},${transaction.type},£${transaction.amount.toFixed(2)},£${transaction.downPayment.toFixed(2)}\n`;
      }

      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = fileName + ' ' + new Date().toLocaleString() + '.csv';
      link.click();

      window.URL.revokeObjectURL(url);
      alert("Spreadsheet generated!");
    }
  </script>
</body>
</html>
